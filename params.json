{"name":"Browserify-shim","tagline":"Makes CommonJS incompatible files browserifyable.","body":"#browserify-shim [![build status](https://secure.travis-ci.org/thlorenz/browserify-shim.png?branch=master)](http://travis-ci.org/thlorenz/browserify-shim)\r\n\r\n[![NPM](https://nodei.co/npm/browserify-shim.png?downloads=true&stars=true)](https://nodei.co/npm/browserify-shim/)\r\n\r\n### Make CommonJS-Incompatible Files Browserifyable\r\n\r\n#### package.json\r\n\r\n```json\r\n{\r\n  \"main\": \"./js/entry.js\",\r\n  \"browser\": {\r\n    \"jquery\": \"./js/vendor/jquery.js\"\r\n  },\r\n  \"browserify-shim\": {\r\n    \"jquery\": \"$\",\r\n    \"three\": \"global:THREE\"\r\n  },\r\n  \"browserify\": {\r\n    \"transform\": [ \"browserify-shim\" ]\r\n  },\r\n  \"dependencies\": {\r\n    \"browserify-shim\": \"~3.2.0\"\r\n  }\r\n}\r\n```\r\n\r\n    browserify . -d -o bundle.js\r\n\r\n\r\n**Table of Contents**  *generated with [DocToc](http://doctoc.herokuapp.com/)*\r\n\r\n- [Installation](#installation)\r\n- [Features](#features)\r\n- [API](#api)\r\n  - [You Will Always](#you-will-always)\r\n    - [1. Install browserify-shim dependency](#1-install-browserify-shim-dependency)\r\n    - [2. Register browserify-shim as a transform with browserify](#2-register-browserify-shim-as-a-transform-with-browserify)\r\n    - [3. Provide browserify-shim config](#3-provide-browserify-shim-config)\r\n      - [Short Form vs. Long Form config](#short-form-vs-long-form-config)\r\n  - [You will sometimes](#you-will-sometimes)\r\n    - [a) Expose global variables via `global:*`](#a-expose-global-variables-via-global)\r\n      - [1. add script tag for library you want to expose](#1-add-script-tag-for-library-you-want-to-expose)\r\n      - [2. Add expose global config to `package.json`](#2-add-expose-global-config-to-packagejson)\r\n      - [3. Require library by the name it was exposed as](#3-require-library-by-the-name-it-was-exposed-as)\r\n      - [Why not just `var THREE = window.THREE`?](#why-not-just-var-three-=-windowthree)\r\n    - [b) Use aliases](#b-use-aliases)\r\n    - [c) Provide an external shim config](#c-provide-an-external-shim-config)\r\n    - [d) Diagnose what browserify-shim is doing](#d-diagnose-what-browserify-shim-is-doing)\r\n- [Multi Shim Example including dependencies](#multi-shim-example-including-dependencies)\r\n  - [a) Config inside `package.json` without aliases](#a-config-inside-packagejson-without-aliases)\r\n  - [b) Config inside `package.json` with aliases](#b-config-inside-packagejson-with-aliases)\r\n  - [c) Config inside `./config/shim.js` without aliases](#c-config-inside-configshimjs-without-aliases)\r\n    - [`package.json`](#packagejson)\r\n    - [`shim.js`](#shimjs)\r\n- [More Examples](#more-examples)\r\n\r\n## Installation\r\n\r\n    npm install browserify-shim\r\n\r\n*For a version compatible with browserify@1.x run `npm install browserify-shim@1.x` instead.*\r\n\r\n*For a version compatible with the [v2 API](https://github.com/thlorenz/browserify-shim/tree/v2#api) `npm install browserify-shim@2.x` instead.*\r\n\r\n## Features\r\n\r\nThe core features of browserify-shim are:\r\n\r\n- Shims **non-CommonJS** modules in order for them to be **browserified** by specifying an alias, the path to the file,\r\n  and the identifier under which the module attaches itself to the global `window` object.\r\n- Includes `depends` for  shimming libraries that depend on other libraries being in the global namespace.\r\n- applies shims configured inside the dependencies of your package\r\n\r\nAdditionally, it handles the following real-world edge cases:\r\n\r\n- Modules that just declare a `var foo = ...` on the script level and assume it gets attached to the `window` object.\r\n  Since the only way they will ever be run is in the global context — \"ahem, … NO?!\"\r\n- Makes `define` and also `module` be `undefined`, in order to fix [improperly-authored\r\n  libraries](https://github.com/mhemesath/r2d3/blob/918bd076e4f980722438b2594d1eba53a522ce75/r2d3.v2.js#L222) that need\r\n  shimming but try anyway to use AMD or CommonJS. For more info read the comment inside [this\r\n  fixture](https://github.com/thlorenz/browserify-shim/blob/master/test/fixtures/shims/lib-with-exports-define-global-problem.js)\r\n\r\n\r\nSince `browserify-shim` is a proper `browserify` transform you can publish packages with files that need to be shimmed,\r\ngranted that you specify the shim config inside the `package.json`.\r\n\r\nWhen `browserify` resolves your package it will run the `browserify-shim` transform and thus shim what's necessary\r\nwhen generating the bundle.\r\n\r\n## API\r\n\r\n### You Will Always\r\n\r\n#### 1. Install browserify-shim dependency\r\n\r\nIn most cases you want to install it as a [devDependency](https://npmjs.org/doc/json.html#devDependencies) via:\r\n\r\n    npm install -D browserify-shim\r\n\r\n#### 2. Register browserify-shim as a transform with browserify\r\n\r\nInside `package.json` add:\r\n\r\n```json\r\n{ \r\n  \"browserify\": {\r\n    \"transform\": [ \"browserify-shim\" ]\r\n  }\r\n}\r\n```\r\n\r\n#### 3. Provide browserify-shim config\r\n\r\nInside `package.json` add:\r\n\r\n```json\r\n{\r\n  \"browserify-shim\": {\r\n    \"./js/vendor/jquery.js\": \"$\",\r\n    \"three\": \"global:THREE\"\r\n  }\r\n}\r\n```\r\n\r\nThe above includes `./js/vendor/jquery.js` (relative to the `package.json`) in the bundle and exports `window.$`.\r\n\r\nAdditionally it exposes `window.THREE` as `three`, so you can `var three = require('three')`. More info\r\n[below](#a-expose-global-variables-via-global).\r\n\r\n##### Short Form vs. Long Form config\r\n\r\nSince `jquery` does not depend on other shimmed modules and thus has no `depends` field, we used the short form to\r\nspecify its exports, however the example above is equivalent to:\r\n\r\n```json\r\n{\r\n  \"browserify-shim\": {\r\n    \"./js/vendor/jquery.js\": { \"exports\": \"$\" }\r\n  }\r\n}\r\n```\r\n\r\n### You will sometimes\r\n\r\n#### a) Expose global variables via `global:*`\r\n\r\nIn some cases the libraries you are using are very large and you'd prefer to add them via a script tag instead to get\r\nthe following benefits:\r\n\r\n- faster bundling times since the library is not included in the bundle\r\n- pull libraries from a [CDN](http://en.wikipedia.org/wiki/Content_delivery_network) which allows it to be pulled\r\n  straight from the user's browser cache in case it was downloaded before\r\n\r\nWe'll show how this works by taking the rather huge yet awesome `THREE.js` library as an example:\r\n\r\n##### 1. add script tag for library you want to expose\r\n\r\n```html\r\n<!-- index.html -->\r\n<head>\r\n  <meta charset=utf-8 />\r\n  <script type=\"text/javascript\" src=\"http://cdnjs.cloudflare.com/ajax/libs/three.js/r61/three.min.js\"></script>\r\n</head>\r\n```\r\n\r\n##### 2. Add expose global config to `package.json`\r\n\r\n```json\r\n{\r\n  \"browserify-shim\": {\r\n    \"three\": \"global:THREE\"\r\n  }\r\n}\r\n```\r\n\r\n**Note:** `THREE.js` attaches `window.THREE`.\r\n\r\n##### 3. Require library by the name it was exposed as\r\n\r\n```js\r\nvar THREE = require('three');\r\n```\r\n\r\n##### Why not just `var THREE = window.THREE`?\r\n\r\nYou want to avoid spreading the knowledge that `THREE` is a global and stay consistent in how you resolve dependencies.\r\nAdditionally if `THREE` would ever be published to [npm](https://npmjs.org/) and you decide to install it from there,\r\nyou don't have to change any of your code since it already is `require`ing it properly.\r\n\r\n\r\n#### b) Use aliases\r\n\r\nYou may expose files under a different name via the [`browser` field](https://gist.github.com/defunctzombie/4339901#replace-specific-files---advanced) and refer to them under that alias in the shim config:\r\n\r\n```json\r\n{\r\n  \"browser\": {\r\n    \"jquery\": \"./js/vendor/jquery.js\"\r\n  },\r\n  \"browserify-shim\": {\r\n    \"jquery\": \"$\"\r\n  }\r\n}\r\n```\r\n\r\nThis also allows you to require this module under the alias, i.e.: `var $ = require('jquery')`.\r\n\r\n#### c) Provide an external shim config\r\n\r\n```json\r\n{\r\n  \"browserify-shim\": \"./config/shim.js\"\r\n}\r\n```\r\n\r\nThe external shim format is very similar to the way in which the shim is specified inside the `package.json`. See\r\n[below](#c-config-inside-configshimjs-without-aliases) for more details.\r\n\r\n#### d) Diagnose what browserify-shim is doing\r\n\r\nYou may encounter problems when your shim config isn't properly setup. In that case you can diagnose them via the\r\n`BROWSERIFYSHIM_DIAGNOSTICS` flag.\r\n\r\nSimply set the flag when building your bundle, i.e.: \r\n\r\n    BROWSERIFYSHIM_DIAGNOSTICS=1 browserify -d . -o js/bundle.js\r\n\r\nor in a `build.js` script add: `process.env.BROWSERIFYSHIM_DIAGNOSTICS=1` to the top.\r\n\r\n## Multi Shim Example including dependencies\r\n\r\nSome libraries depend on other libraries to have attached their exports to the window for historical reasons :(.\r\n(Hopefully soon we can truly say that this bad design is history.)\r\n\r\nIn this contrived example we are shimming four libraries since none of them are commonJS compatible:\r\n\r\n- **x** exports **window.$**\r\n- **x-ui** exports nothing since it just **attaches itself to x**. Therefore x-ui depends on x.\r\n- **y** exports **window.Y** and also **depends on x** expecting to find it on the window as $.\r\n- **z** exports **window.zorro** and **depends on x and y**. It expects to find x on the window as $, but y on the window as YNOT, \r\nwhich is actually different than the name under which y exports itself.\r\n\r\nWe will be using the `depends` field in order to ensure that a dependency is included and initialized before a library\r\nthat depends on it is initialized.\r\n\r\nBelow are three examples, each showing a way to properly shim the above mentioned modules.\r\n\r\n### a) Config inside `package.json` without aliases\r\n\r\n```json\r\n{\r\n  \"browserify\": {\r\n    \"transform\": [ \"browserify-shim\" ]\r\n  },\r\n  \"browserify-shim\": {\r\n    \"./vendor/x.js\"    :  \"$\",\r\n    \"./vendor/x-ui.js\" :  { \"depends\": [ \"./vendor/x.js\" ] },\r\n    \"./vendor/y.js\"    :  { \"exports\": \"Y\", \"depends\": [ \"./vendor/x.js:$\" ] },\r\n    \"./vendor/z.js\"    :  { \"exports\": \"zorro\", \"depends\": [ \"./vendor/x.js:$\", \"./vendor/y.js:YNOT\" ] }\r\n  }\r\n}\r\n```\r\n\r\n**Note:** the `depends` array consists of entries of the format `path-to-file:export`\r\n\r\n### b) Config inside `package.json` with aliases\r\n\r\n```json\r\n{\r\n  \"browserify\": {\r\n    \"transform\": [ \"browserify-shim\" ]\r\n  },\r\n  \"browser\": {\r\n    \"x\"    :  \"./vendor/x.js\",\r\n    \"x-ui\" :  \"./vendor/x-ui.js\",\r\n    \"y\"    :  \"./vendor/y.js\",\r\n    \"z\"    :  \"./vendor/z.js\"\r\n  },\r\n   \"browserify-shim\": {\r\n    \"x\"    :  \"$\",\r\n    \"x-ui\" :  { \"depends\": [ \"x\" ] },\r\n    \"y\"    :  { \"exports\": \"Y\", \"depends\": [ \"x:$\" ] },\r\n    \"z\"    :  { \"exports\": \"zorro\", \"depends\": [ \"x:$\", \"y:YNOT\" ] }\r\n  }\r\n}\r\n```\r\n\r\n**Note:** the `depends` entries make use of the aliases as well `alias:export`\r\n\r\n### c) Config inside `./config/shim.js` without aliases\r\n\r\n#### `package.json`\r\n\r\n```json\r\n{\r\n  \"browserify\": {\r\n    \"transform\": [ \"browserify-shim\" ]\r\n  },\r\n  \"browserify-shim\": \"./config/shim.js\"\r\n}\r\n```\r\n\r\n#### `shim.js`\r\n\r\n```js\r\nmodule.exports = {\r\n  '../vendor/x.js'    :  '$',\r\n  '../vendor/x-ui.js' :  { 'depends': { '../vendor/x.js': null } },\r\n  '../vendor/y.js'    :  { 'exports': 'Y', 'depends': { '../vendor/x.js': '$' } },\r\n  '../vendor/z.js'    :  { 'exports': 'zorro', 'depends': { '../vendor/x.js': '$', '../vendor/y.js': 'YNOT' } }\r\n}\r\n```\r\n\r\n**Note:** all paths are relative to `./config/shim.js` instead of the `package.json`.\r\n\r\nThe main difference to `a)` is the `depends` field specification. Instead it being an array of strings it expresses its dependencies as a hashmap:\r\n\r\n- **key:** `path-to-file` \r\n- **value:**  the name under which it is expected to be attached on the window\r\n\r\n## More Examples\r\n\r\n- [shim-jquery](https://github.com/thlorenz/browserify-shim/tree/master/examples/shim-jquery)\r\n- [expose-jquery](https://github.com/thlorenz/browserify-expose/tree/master/examples/expose-jquery)\r\n- [shim-jquery-external](https://github.com/thlorenz/browserify-shim/tree/master/examples/shim-jquery-external)\r\n- the [tests](https://github.com/thlorenz/browserify-shim/tree/master/test) are a great resource to investigate the\r\n  different ways to configure shims and to understand how shims are applied to packages found inside the `node_modules`\r\n  of your package\r\n\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/thlorenz/browserify-shim/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}